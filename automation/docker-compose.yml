name: automation

x-n8n-base: &n8n-base
  image: docker.n8n.io/n8nio/n8n:latest
  pull_policy: always
  restart: unless-stopped
  env_file:
    - .env
  volumes:
    - app_data:/home/node/.n8n
    - app_files:/files
  healthcheck:
    test: ["CMD", "curl", "--fail", "http://localhost:5678/healthz"]
    interval: 10s
    timeout: 5s
    retries: 5
    start_period: 10s
    start_interval: 2s
  labels:
    - com.docker.compose.project=automation
    - app.name=n8n

x-tailscale-base: &tailscale-base
  image: tailscale/tailscale:latest
  environment:
    - TS_EXTRA_ARGS=--auth-key file:/run/secrets/tsauthkey --accept-dns --hostname ${ENV_TYPE}automation${ENV_SUFFIX}
    - TS_STATE_DIR=/var/lib/tailscale
    - TS_USERSPACE=false
  volumes:
    - tun_state:/var/lib/tailscale
  devices:
    - /dev/net/tun:/dev/net/tun
  cap_add:
    - NET_ADMIN
  restart: unless-stopped
  secrets:
    - tsauthkey
  healthcheck:
    test: ["CMD", "tailscale", "status"]
    interval: 10s
    timeout: 5s
    retries: 3
    start_period: 10s
    start_interval: 2s
  labels:
    - com.docker.compose.project=automation
    - app.name=tailscale

services:
  app:
    <<: *n8n-base
    ports:
      - ${N8N_PORT:-5678}:5678
    profiles:
      - local
    labels:
      - com.docker.compose.project=automation
      - app.name=n8n
      - app.mode=local

  tail:
    <<: *n8n-base
    network_mode: service:tun
    depends_on:
      tun:
        condition: service_healthy
    profiles:
      - tail
    labels:
      - com.docker.compose.project=automation
      - app.name=n8n
      - app.mode=tail

  tun:
    <<: *tailscale-base
    profiles:
      - tail
    labels:
      - com.docker.compose.project=automation
      - app.name=tailscale

secrets:
  tsauthkey:
    file: ${TSAUTHKEY_PATH:-./tsauthkey.key}
    external: ${TSAUTHKEY_EXTERNAL:-false}

volumes:
  app_data:
  app_files:
  tun_state: